{
    "$schema": "http://json-schema.org/draft-04/schema",
    "type": "object",
    "description": "Runtime configuration settings for the 'ambrosia-node' package.",
    "required": ["instanceName", "icCraPort"],
    "properties": {
        "$schema" : {
            "type": "string",
            "description": "The location of the matching JSON schema file, which is required for IntelliSense and auto-completion when editing using VSCode/VS2019+."
        },
        "autoRegister": {
            "type": "boolean",
            "description": "Whether to automatically [re]register this Ambrosia Immortal instance at startup. When true, the following settings must also be explicitly set: icReceivePort, icSendPort, icLogFolder. If [re]registration succeeds, this setting automatically resets to false. Defaults to false.",
            "default": false
        },
        "instanceName": {
            "type": "string",
            "description": "The name this Ambrosia Immortal instance will be referred to by all instances (including itself).",
            "default": "myInstance"
        },
        "icCraPort": {
            "type": "number",
            "description": "The port number that the Common Runtime for Applications (CRA) layer uses."
        },
        "icReceivePort": {
            "type": "number",
            "description": "The port number that the Immortal Coordinator (IC) receives on. If not provided, it will be read from the registration."
        },
        "icSendPort": {
            "type": "number",
            "description": "The port number that the Immortal Coordinator (IC) sends on. If not provided, it will be read from the registration."
        },
        "icLogFolder": {
            "type": "string",
            "description": "The folder where the Immortal Coordinator (IC) will write its logs (or read logs from if doing \"time-travel debugging\"). If not provided, it will be read from the registration."
        },
        "icLogStorageType" : {
            "type": "string",
            "enum": [ "Files", "Blobs" ],
            "description": "The storage type that the Immortal Coordinator (IC) logs will be persisted in. Defaults to \"Files\".",
            "default": "Files"
        },
        "icBinFolder": {
            "type": "string",
            "description": "The folder path(s) where the Immortal Coordinator (IC) binaries exist. Separate multiple paths with ';'. If not specified, the 'AMBROSIATOOLS' environment variable will be used."
        },
        "icIPv4Address" : {
            "type": "string",
            "description": "An override IPv4 address for the Immortal Coordinator (IC) to use instead of the local IPv4 address."
        },
        "icHostingMode" : {
            "type": "string",
            "enum": [ "Integrated", "Separated" ],
            "description": "The hosting mode for the Immortal Coordinator (IC), which affects where and how the IC runs. If not explicitly set, the value will be computed based on the value provided for (or the omission of) 'icIPv4Address'.",
            "default": "Integrated"
        },
        "useNetCore": {
            "type": "boolean",
            "description": "Whether to use .NET Core (instead of .Net Framework) to run the Immortal Coordinator (IC) [this is Windows-only option]. Defaults to false.",
            "default": false
        },
        "debugStartCheckpoint": {
            "type": "number",
            "description": "The checkpoint number to start \"time-travel debugging\" from. Defaults to 0 (which means don't debug)."
        },
        "debugTestUpgrade": {
            "type": "boolean",
            "description": "Whether to perform a test upgrade (for debugging/testing purposes). If set to true, a non-zero 'debugStartCheckpoint' must also be specified. Defaults to false.",
            "default": false
        },
        "logTriggerSizeInMB": {
            "type": "number",
            "description": "The size (in MB) the log must reach before the IC will take a checkpoint and start a new log."
        },
        "isActiveActive": {
            "type": "boolean",
            "description": "Whether this [primary] instance will run in an active-active configuration. If specified, overrides the registered value."
        },
        "replicaNumber": {
            "type": "number",
            "description": "The replica (secondary) ID this instance will use in an active-active configuration. MUST match the value used when registering the replica with 'AddReplica'."
        },
        "appVersion": {
            "type": "number",
            "description": "The nominal version of this Immortal instance. Used to identify the log sub-folder name (ie. &lt;icInstanceName>_&lt;appVersion>) that will be logged to (or read from if debugStartCheckpoint is specified)."
        },
        "upgradeVersion": {
            "type": "number",
            "description": "The nominal version this Immortal instance should upgrade (migrate) to at startup. Must be greater than 'appVersion' to trigger an upgrade. Test the upgrade first by setting 'debugTestUpgrade' to true."
        },
        "activeCode": {
            "type": "string",
            "enum": [ "VCurrent", "VNext" ],
            "default": "VCurrent",
            "description": "Which version of application code is currently active (before an upgrade: \"VCurrent\"; immediately after an upgrade: \"VNext\"). This setting is changed automatically during an upgrade, but must be manually changed back to 'VCurrent' (along with updating the code) when preparing for a subsequent upgrade. Defaults to \"VCurrent\"."
        },
        "secureNetworkAssemblyName" : {
            "type": "string",
            "description": "The name of the .NET assembly used to establish a secure network channel between ICs."
        },
        "secureNetworkClassName" : {
            "type": "string",
            "description": "The name of the .NET class (that implements ISecureStreamConnectionDescriptor) in 'secureNetworkAssemblyName'."
        },
        "lbOptions": {
            "type": "object",
            "description": "Options used to control the behavior of the language-binding.",
            "properties": {
                "deleteLogs": {
                    "type": "boolean",
                    "description": "[Debug] Set this to true to clear the IC logs (all prior checkpoints and logged state changes will be PERMANENTLY LOST, and recovery will not run). Defaults to false.",
                    "default": false
                },
                "deleteRemoteCRAConnections": {
                    "type": "boolean",
                    "description": "[Debug] Set this to true to delete any previously created non-local CRA connections [from this instance] at startup. Defaults to false.",
                    "default": false
                },
                "allowCustomJSONSerialization": {
                    "type": "boolean",
                    "description": "Set this to false to disable the specialized JSON serialization of BigInt and typed-arrays (eg. Uint8Array). Defaults to true.",
                    "default": true
                },
                "typeCheckIncomingPostMethodParameters": {
                    "type": "boolean",
                    "description": "Set this to false to skip type-checking the parameters of incoming post methods for correctness against published methods/types. Defaults to true.",
                    "default": true
                },
                "outputLoggingLevel": {
                    "type": "string",
                    "enum": [ "Minimal", "Normal", "Verbose" ],
                    "default": "Normal",
                    "description": "The level of detail to include in the language-binding output log. Defaults to \"Normal\"."
                },
                "outputLogDestination": {
                    "type": "string",
                    "enum": [ "Console", "File", "ConsoleAndFile" ],
                    "description": "Destination(s) where the language-binding will log output. Defaults to 'Console'. While logging to the console is useful during development/debugging, for production set it to 'File' (for performance).",
                    "default": "Console"
                },
                "outputLogFolder": {
                    "type": "string",
                    "description": "The folder where the language-binding will write output log files (when outputLogDestination is 'File' or 'ConsoleAndFile'). Defaults to './outputLogs'.",
                    "default": "./outputLogs"
                },
                "allowDisplayOfRpcParams": {
                    "type": "boolean",
                    "description": "Set this to true to allow incoming RPC parameters [which can contain privacy/security related content] to be displayed/logged. Defaults to false.",
                    "default": false
                },
                "allowPostMethodTimeouts": {
                    "type": "boolean",
                    "description": "Set this to false to disable the timeout feature of post methods. Defaults to true.",
                    "default": true
                },
                "allowPostMethodErrorStacks": {
                    "type": "boolean",
                    "description": "Set this to true to enable sending a full stack trace in a post method error result. Defaults to false.",
                    "default": false
                },
                "enableTypeScriptStackTraces": {
                    "type": "boolean",
                    "description": "Enables an Error stack trace to refer to TypeScript files/locations (when available) instead of JavaScript files/locations. Defaults to true.",
                    "default": true
                },
                "maxInFlightPostMethods": 
                {
                    "type": "number",
                    "description": "Set this to a positive integer to generate a warning whenever the number of in-flight post methods reaches this threshold. Defaults to -1 (no limit).",
                    "default": -1
                },
                "messageBytePoolSizeInMB":
                {
                    "type": "number",
                    "description": "The size (in MB) of the message byte pool used for optimizing message construction. Defaults to 2MB.",
                    "default": 2
                }
            }
        }
    }    
}