# Variable 'AMBROSIA_DOTNET_CONF' was defined in the Variables tab
# Variable 'AMBROSIA_DOTNET_FRAMEWORK' was defined in the Variables tab
# Variable 'AZURE_STORAGE_CONN_STRING' was defined in the Variables tab
# Variable 'Configuration' was defined in the Variables tab
# Variable 'Platform' was defined in the Variables tab
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/master
jobs:
- job: Phase_1
  displayName: Test Run
  cancelTimeoutInMinutes: 1
  pool:
    vmImage: windows-2019
  steps:
  - checkout: self
    clean: true
  - task: NuGetToolInstaller@0
    displayName: Use NuGet 5.8.0
    inputs:
      versionSpec: 5.8.0
  - task: BatchScript@1
    displayName: Run script SetEnvVars.cmd
    inputs:
      filename: AmbrosiaTest/AmbrosiaTest/SetEnvVars.cmd
      arguments: '"$(AZURE_STORAGE_CONN_STRING)"'
      modifyEnvironment: true
  - task: PowerShell@2
    displayName: Install Powershell Azure for cleanup scripts
    inputs:
      targetType: inline
      filePath: AmbrosiaTest/AmbrosiaTest/CleanUpAzure.ps1
      arguments: unitendtoend*
      script: >-
        Install-Module Az.Storage -Force -AllowClobber

        Install-Module AzTable -Force -AllowClobber

        Install-Module Az.Resources -Force -AllowClobber

        Import-Module AzTable -Force
      pwsh: true
  - task: NuGetCommand@2
    displayName: NuGet restore AmbrosiaTest
    inputs:
      solution: AmbrosiaTest/AmbrosiaTest.sln
  - task: VSBuild@1
    displayName: Build solution AmbrosiaTest
    inputs:
      solution: AmbrosiaTest/AmbrosiaTest.sln
      vsVersion: 16.0
      platform: $(Platform)
      configuration: $(Configuration)
      clean: true
      msbuildArchitecture: x64
  - task: NuGetCommand@2
    displayName: NuGet restore Immort Coord
    inputs:
      solution: ImmortalCoordinator/ImmortalCoordinator.csproj
  - task: NuGetCommand@2
    displayName: NuGet restore Ambrosia
    inputs:
      solution: Ambrosia/Ambrosia.sln
  - task: NuGetCommand@2
    displayName: NuGet restore AmbrosiaCS
    inputs:
      solution: Clients/CSharp/AmbrosiaCS/AmbrosiaCS.sln
  - task: VSBuild@1
    displayName: Build solution Ambrosia.sln
    inputs:
      solution: Ambrosia/Ambrosia.sln
      vsVersion: 16.0
      platform: $(Platform)
      configuration: $(Configuration)
      clean: true
      msbuildArchitecture: x64
  - task: VSBuild@1
    displayName: 'Build solution AmbrosiaCS.sln '
    inputs:
      solution: Clients/CSharp/AmbrosiaCS/AmbrosiaCS.sln
      vsVersion: 16.0
      platform: $(Platform)
      configuration: $(Configuration)
      clean: true
      msbuildArchitecture: x64
  - task: Bash@3
    displayName: Bash Script to Build PTI
    inputs:
      filePath: Scripts/build_windows_ci.sh
  - task: CopyFiles@2
    displayName: Copy Ambrosia to net461 in AmbrosiaTest
    inputs:
      SourceFolder: Ambrosia/Ambrosia/bin/x64/Release/net461
      Contents: '*.*'
      TargetFolder: AmbrosiaTest/AmbrosiaTest/bin/x64/Release/net461
  - task: CopyFiles@2
    displayName: Copy Immortal Coord to net461 in AmbrosiaTest
    inputs:
      SourceFolder: ImmortalCoordinator/bin/x64/Release/net461
      Contents: '*.*'
      TargetFolder: AmbrosiaTest/AmbrosiaTest/bin/x64/Release/net461
  - task: CopyFiles@2
    displayName: Copy AmbrosiaCS to net461 in Ambrosia to AmbrosiaTest
    inputs:
      SourceFolder: Clients/CSharp/AmbrosiaCS/bin/x64/Release/net461
      Contents: '*.*'
      TargetFolder: AmbrosiaTest/AmbrosiaTest/bin/x64/Release/net461
  - task: VisualStudioTestPlatformInstaller@1
    displayName: Visual Studio Test Platform Installer
    inputs:
      versionSelector: latestStable
  - task: VSTest@2
    displayName: 'VsTest - Run Ambrosia Unit Tests '
    continueOnError: True
    inputs:
      testAssemblyVer2: AmbrosiaTest.dll
      searchFolder: AmbrosiaTest/AmbrosiaTest/bin/x64/Release
      testFiltercriteria: TestCategory=ADO
      testRunTitle: VS Tests categorized as ADO
      platform: $(Platform)
      configuration: $(Configuration)
      failOnMinTestsNotRun: true
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()
    continueOnError: True
    inputs:
      SourceFolder: AmbrosiaTest/Log
      TargetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifact
    condition: succeededOrFailed()
    inputs:
      path: $(Build.ArtifactStagingDirectory)
      artifactName: LogDir
...
