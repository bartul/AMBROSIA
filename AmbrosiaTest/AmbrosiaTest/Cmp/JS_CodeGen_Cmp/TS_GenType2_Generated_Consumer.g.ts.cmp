// Generated consumer-side API for the 'server' Ambrosia Node instance.
// Publisher: Darren Gehring [darrenge@microsoft.com].
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

let DESTINATION_INSTANCE_NAME: string = "server";
let POST_TIMEOUT_IN_MS: number = 8000; // -1 = Infinite

/**
 * Generic built-in types can be used, but only with concrete types (not type placeholders, eg. "T"): Example #2
 */
export class EmployeeWithGenerics
{
    firstNames: Set<{ name: string, nickNames: NickNames }>;
    lastName: string;
    birthYear: number;

    constructor(firstNames: Set<{ name: string, nickNames: NickNames }>, lastName: string, birthYear: number)
    {
        this.firstNames = firstNames;
        this.lastName = lastName;
        this.birthYear = birthYear;
    }
}

/**
 * Test for a literal-object array type; this should generate a 'NickNames_Element' class and then redefine the type of NickNames as Nicknames_Element[].
 * This is done to makes it easier for the consumer to create a NickNames instance.
 */
export type NickNames = NickNames_Element[];

export class NickNames_Element
{
    name: string;

    constructor(name: string)
    {
        this.name = name;
    }
}