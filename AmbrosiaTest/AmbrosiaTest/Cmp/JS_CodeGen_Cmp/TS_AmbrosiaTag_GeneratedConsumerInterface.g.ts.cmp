// Generated consumer-side API for the 'server' Ambrosia Node instance.
// Publisher: Darren Gehring [darrenge@microsoft.com].
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

let DESTINATION_INSTANCE_NAME: string = "server";
let POST_TIMEOUT_IN_MS: number = 8000; // -1 = Infinite

/**
Test File to test all the the ways that the ambrosia tag can be set and still work
 */
export namespace Test
{
    /** *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().* */
    export function OneLineNoComment_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "OneLineNoComment", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /**
     * *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * Multi Line with Comment before Tag
     * but still before tag
     */
    export function MultiLineCommentBeforeTag_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "MultiLineCommentBeforeTag", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /** *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().* */
    export function MultiSeparateLinesCommentBeforeTag_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "MultiSeparateLinesCommentBeforeTag", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /**
     * *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * ************ Have a space after the tag before function declaration
     */
    export function EmptyLineBetweenTagAndFctn_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "EmptyLineBetweenTagAndFctn", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /**
     * *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * **** Spacing around the tag
     */
    export function SpacingAroundTag_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "SpacingAroundTag", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /**
     * *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * JS Doc
     */
    export function JSDOcTag_Post(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "JSDOcTag", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /**
     * *Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * The ambrosia tag must be on the implementation of an overloaded function
     */
    export function fnOverload_Post(callContextData: any, name?: string): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "fnOverload", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("name?", name));
    }
}

/**
 * Handler for the results of previously called post methods (in Ambrosia, only 'post' methods return values). See Messages.PostResultDispatcher.\
 * Must return true only if the result (or error) was handled.
 */
export function postResultDispatcher(senderInstanceName: string, methodName: string, methodVersion: number, callID: number, callContextData: any, result: any, errorMsg: string): boolean
{
    const sender: string = IC.isSelf(senderInstanceName) ? "local" : `'${senderInstanceName}'`;
    let handled: boolean = true;

    if (senderInstanceName !== DESTINATION_INSTANCE_NAME)
    {
        return (false); // Not handled (this post result is from a different instance than the one this consumer-side file is for)
    }

    if (errorMsg)
    {
        switch (methodName)
        {
            case "OneLineNoComment":
            case "MultiLineCommentBeforeTag":
            case "MultiSeparateLinesCommentBeforeTag":
            case "EmptyLineBetweenTagAndFctn":
            case "SpacingAroundTag":
            case "JSDOcTag":
            case "fnOverload":
                Utils.log(`Error: ${errorMsg}`);
                break;
            default:
                handled = false;
                break;
        }
    }
    else
    {
        switch (methodName)
        {
            case "OneLineNoComment":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "MultiLineCommentBeforeTag":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "MultiSeparateLinesCommentBeforeTag":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "EmptyLineBetweenTagAndFctn":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "SpacingAroundTag":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "JSDOcTag":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "fnOverload":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            default:
                handled = false;
                break;
        }
    }
    return (handled);
}