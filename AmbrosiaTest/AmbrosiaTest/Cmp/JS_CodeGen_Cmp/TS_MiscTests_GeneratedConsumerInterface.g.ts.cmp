// Generated consumer-side API for the 'TS_MiscTests_Generated' Ambrosia Node app/service.
// Publisher: Darren Gehring [darrenge@microsoft.com].
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

let _destinationInstanceName: string = null;
let _postTimeoutInMs: number = 8000; // -1 = Infinite

/** 
 * Sets the destination instance name that the API targets.\
 * Must be called at least once (with the name of a registered Ambrosia instance that implements the 'TS_MiscTests_Generated' API) before any other method in the API is used.
 *
 * **Warning:** When using post methods, it is strongly recommended to not change the initially set destination instance because it can cause postResultDispatcher() to not process the result.
 */
export function setDestinationInstance(instanceName: string): void
{
    _destinationInstanceName = instanceName.trim();
}

/** Returns the destination instance name that the API currently targets. */
export function getDestinationInstance(): string
{
    return (_destinationInstanceName);
}

/** Throws if _destinationInstanceName has not been set. */
function checkDestinationSet(): void
{
    if (!_destinationInstanceName)
    {
        throw new Error("setDestinationInstance() must be called to define the target destination before the 'TS_MiscTests_Generated' API can be used.");
    }
}
/**
 * Sets the post method timeout interval (in milliseconds), which is how long to wait for a result from the destination instance before raising an error.\
 * All post methods will use this timeout value. Specify -1 for no timeout. 
 */
export function setPostTimeoutInMs(timeoutInMs: number): void
{
    _postTimeoutInMs = Math.max(-1, timeoutInMs);
}
/**
 * Returns the post method timeout interval (in milliseconds), which is how long to wait for a result from the destination instance before raising an error.\
 * A value of -1 means there is no timeout.
 */
export function getPostTimeoutInMs(): number
{
    return (_postTimeoutInMs);
}

/**
Test File of misc tests. If find a theme or grouping then move out of this file into separate file
 */
export namespace Test
{
    /**
     * *Note: The result ({ r1: string, r2: string }) produced by this post method is received via the PostResultDispatcher provided to IC.start(). Returns the post method callID.*
     * 
     * Correctly handle line-breaks and comments
     */
    export function myComplexReturnFunction_Post(callContextData: any): number
    {
        checkDestinationSet();
        const callID = IC.postFork(_destinationInstanceName, "myComplexReturnFunction", 1, _postTimeoutInMs, callContextData);
        return (callID);
    }

    /**
     * *Note: The result ({ r1: string, r2: string }) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * Correctly handle line-breaks and comments
     */
    export function myComplexReturnFunction_PostByImpulse(callContextData: any): void
    {
        checkDestinationSet();
        IC.postByImpulse(_destinationInstanceName, "myComplexReturnFunction", 1, _postTimeoutInMs, callContextData);
    }
}

/**
 * Handler for the results of previously called post methods (in Ambrosia, only 'post' methods return values). See Messages.PostResultDispatcher.\
 * Must return true only if the result (or error) was handled.
 */
export function postResultDispatcher(senderInstanceName: string, methodName: string, methodVersion: number, callID: number, callContextData: any, result: any, errorMsg: string): boolean
{
    const sender: string = IC.isSelf(senderInstanceName) ? "local" : `'${senderInstanceName}'`;
    let handled: boolean = true;

    if (senderInstanceName !== _destinationInstanceName)
    {
        return (false); // Not handled (this post result is from a different instance than the destination instance currently being targeted)
    }

    if (errorMsg)
    {
        switch (methodName)
        {
            case "myComplexReturnFunction":
                Utils.log(`Error: ${errorMsg}`);
                break;
            default:
                handled = false;
                break;
        }
    }
    else
    {
        switch (methodName)
        {
            case "myComplexReturnFunction":
                const myComplexReturnFunction_Result: { r1: string, r2: string } = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            default:
                handled = false;
                break;
        }
    }
    return (handled);
}