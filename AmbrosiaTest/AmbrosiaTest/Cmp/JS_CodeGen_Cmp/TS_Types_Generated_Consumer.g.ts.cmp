// Generated consumer-side API for the 'server' Ambrosia Node instance.
// Publisher: Darren Gehring [darrenge@microsoft.com].
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

let DESTINATION_INSTANCE_NAME: string = "server";
let POST_TIMEOUT_IN_MS: number = 8000; // -1 = Infinite

export namespace Test
{
    /*********** Enum type (numeric enum - strings as number) as return */
    export enum PrintMedia { Newspaper = 1, Newsletter = 2, Magazine = 3, Book = 4 }

    /********** Enum type (Reverse Mapped enum - can access the value of a member and also a member name from its value) */
    export enum PrintMediaReverse { NewspaperReverse = 1, NewsletterReverse = 2, MagazineReverse = 3, BookReverse = 4 }

    export enum MyEnumAA { aa = -1, bb = -123, cc = 123, dd = 0 }

    export enum MyEnumBBB { aaa = -1, bbb = 0 }

    /*************** Complex Type */
    export class Name
    {
        first: string;
        last: string;
        priorNames: Names[];

        constructor(first: string, last: string, priorNames: Names[])
        {
            this.first = first;
            this.last = last;
            this.priorNames = priorNames;
        }
    }

    /************** Example of a type that references another type *************.
     */
    export type Names = Name[];

    /************** Example of a nested complex type.*************
     */
    export class Nested
    {
        abc: { a: Uint8Array, b: { c: Names } };

        constructor(abc: { a: Uint8Array, b: { c: Names } })
        {
            this.abc = abc;
        }
    }

    /**
     * Type with missing type information
     */
    export class typeWithMissingType
    {
        p1: any;
        p2: number;

        constructor(p1: any, p2: number)
        {
            this.p1 = p1;
            this.p2 = p2;
        }
    }

    /************* Primitives - bool, string, number, array */
    export function BasicTypes_PostFork(callContextData: any, isFalse: boolean, height: number, mystring?: string, mystring2?: string, my_array?: number[], notSure?: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "BasicTypes", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("isFalse", isFalse), 
            IC.arg("height", height), 
            IC.arg("mystring?", mystring), 
            IC.arg("mystring2?", mystring2), 
            IC.arg("my_array?", my_array), 
            IC.arg("notSure?", notSure));
    }

    /************* Primitives - bool, string, number, array */
    export function BasicTypes_PostImpulse(callContextData: any, isFalse: boolean, height: number, mystring?: string, mystring2?: string, my_array?: number[], notSure?: any): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "BasicTypes", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("isFalse", isFalse), 
            IC.arg("height", height), 
            IC.arg("mystring?", mystring), 
            IC.arg("mystring2?", mystring2), 
            IC.arg("my_array?", my_array), 
            IC.arg("notSure?", notSure));
    }

    /********* Function using / returning Numeric Enum */
    export function getMedia_PostFork(callContextData: any, mediaName: string): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "getMedia", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("mediaName", mediaName));
    }

    /********* Function using / returning Numeric Enum */
    export function getMedia_PostImpulse(callContextData: any, mediaName: string): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "getMedia", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("mediaName", mediaName));
    }

    /************* Void type */
    export function warnUser_PostFork(callContextData: any): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "warnUser", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /************* Void type */
    export function warnUser_PostImpulse(callContextData: any): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "warnUser", 1, POST_TIMEOUT_IN_MS, callContextData);
    }

    /************** Example of a [post] method that uses custom types. */
    export function makeName_PostFork(callContextData: any, firstName?: string, lastName?: string): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "makeName", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("firstName?", firstName), 
            IC.arg("lastName?", lastName));
    }

    /************** Example of a [post] method that uses custom types. */
    export function makeName_PostImpulse(callContextData: any, firstName?: string, lastName?: string): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "makeName", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("firstName?", firstName), 
            IC.arg("lastName?", lastName));
    }

    /********* Function returning number */
    export function return_number_PostFork(callContextData: any, strvalue: string): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "return_number", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("strvalue", strvalue));
    }

    /********* Function returning number */
    export function return_number_PostImpulse(callContextData: any, strvalue: string): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "return_number", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("strvalue", strvalue));
    }

    /********* Function returning string */
    export function returnstring_PostFork(callContextData: any, numvalue: number): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "returnstring", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("numvalue", numvalue));
    }

    /********* Function returning string */
    export function returnstring_PostImpulse(callContextData: any, numvalue: number): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "returnstring", 1, POST_TIMEOUT_IN_MS, callContextData, IC.arg("numvalue", numvalue));
    }

    /********* Function with missing types ****
     * Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().
     * Function with missing type information
     */
    export function fnWithMissingType_PostFork(callContextData: any, p1: any, p2: number): void
    {
        IC.postFork(DESTINATION_INSTANCE_NAME, "fnWithMissingType", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("p1", p1), 
            IC.arg("p2", p2));
    }

    /********* Function with missing types ****
     * Note: The result (void) produced by this post method is received via the PostResultDispatcher provided to IC.start().
     * Function with missing type information
     */
    export function fnWithMissingType_PostImpulse(callContextData: any, p1: any, p2: number): void
    {
        IC.postImpulse(DESTINATION_INSTANCE_NAME, "fnWithMissingType", 1, POST_TIMEOUT_IN_MS, callContextData, 
            IC.arg("p1", p1), 
            IC.arg("p2", p2));
    }
}

/**
 * Handler for the results of previously called post methods (in Ambrosia, only 'post' methods return values). See Messages.PostResultDispatcher.\
 * Must return true only if the result (or error) was handled.
 */
export function postResultDispatcher(senderInstanceName: string, methodName: string, methodVersion: number, callID: number, callContextData: any, result: any, errorMsg: string): boolean
{
    const sender: string = IC.isSelf(senderInstanceName) ? "local" : `'${senderInstanceName}'`;
    let handled: boolean = true;

    if (senderInstanceName !== DESTINATION_INSTANCE_NAME)
    {
        return (false); // Not handled (this post result is from a different instance than the one this consumer-side file is for)
    }

    if (errorMsg)
    {
        switch (methodName)
        {
            case "BasicTypes":
            case "getMedia":
            case "warnUser":
            case "makeName":
            case "return_number":
            case "returnstring":
            case "fnWithMissingType":
                Utils.log(`Error: ${errorMsg}`);
                break;
            default:
                handled = false;
                break;
        }
    }
    else
    {
        switch (methodName)
        {
            case "BasicTypes":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "getMedia":
                const getMedia_Result: Test.PrintMedia = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "warnUser":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "makeName":
                const makeName_Result: Test.Names = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "return_number":
                const return_number_Result: number = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "returnstring":
                const returnstring_Result: string = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            case "fnWithMissingType":
                // TODO: Handle the method completion (it returns void), optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            default:
                handled = false;
                break;
        }
    }
    return (handled);
}