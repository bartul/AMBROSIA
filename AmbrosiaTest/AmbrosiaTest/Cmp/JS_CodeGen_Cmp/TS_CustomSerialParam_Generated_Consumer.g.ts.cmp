// Generated consumer-side API for the 'server' Ambrosia Node instance.
// Publisher: Darren Gehring [darrenge@microsoft.com].
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

let DESTINATION_INSTANCE_NAME: string = "server";
let POST_TIMEOUT_IN_MS: number = 8000; // -1 = Infinite

export namespace Test
{
    /**
     * Method to test custom serialized parameters.
     * @param rawParams Description of the format of the custom serialized byte array.
     */
    export function takesCustomSerializedParams_Fork(rawParams: Uint8Array): void
    {
        IC.callFork(DESTINATION_INSTANCE_NAME, 2, rawParams);
    }

    /**
     * Method to test custom serialized parameters.
     * @param rawParams Description of the format of the custom serialized byte array.
     */
    export function takesCustomSerializedParams_Impulse(rawParams: Uint8Array): void
    {
        IC.callImpulse(DESTINATION_INSTANCE_NAME, 2, rawParams);
    }

    /**
     * Method to test custom serialized parameters.
     * @param rawParams Description of the format of the custom serialized byte array.
     */
    export function takesCustomSerializedParams_EnqueueFork(rawParams: Uint8Array): void
    {
        IC.queueFork(DESTINATION_INSTANCE_NAME, 2, rawParams);
    }

    /**
     * Method to test custom serialized parameters.
     * @param rawParams Description of the format of the custom serialized byte array.
     */
    export function takesCustomSerializedParams_EnqueueImpulse(rawParams: Uint8Array): void
    {
        IC.queueImpulse(DESTINATION_INSTANCE_NAME, 2, rawParams);
    }
}