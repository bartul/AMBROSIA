// Generated consumer-side API for the 'ASTTest_Generated' Ambrosia Node app/service.
// Publisher: (Not specified).
// Note: This file was generated
// Note [to publisher]: You can edit this file, but to avoid losing your changes be sure to specify a 'mergeType' other than 'None' (the default is 'Annotate') when re-running emitTypeScriptFile[FromSource]().
import Ambrosia = require("ambrosia-node");
import IC = Ambrosia.IC;
import Utils = Ambrosia.Utils;

const _knownDestinations: string[] = []; // All previously used destination instances (the 'ASTTest_Generated' Ambrosia app/service can be running on multiple instances, potentially simultaneously)
let _destinationInstanceName: string = ""; // The current destination instance
let _postTimeoutInMs: number = 8000; // -1 = Infinite

/** 
 * Sets the destination instance name that the API targets.\
 * Must be called at least once (with the name of a registered Ambrosia instance that implements the 'ASTTest_Generated' API) before any other method in the API is used.
 */
export function setDestinationInstance(instanceName: string): void
{
    _destinationInstanceName = instanceName.trim();
    if (_destinationInstanceName && (_knownDestinations.indexOf(_destinationInstanceName) === -1))
    {
        _knownDestinations.push(_destinationInstanceName);
    }
}

/** Returns the destination instance name that the API currently targets. */
export function getDestinationInstance(): string
{
    return (_destinationInstanceName);
}

/** Throws if _destinationInstanceName has not been set. */
function checkDestinationSet(): void
{
    if (!_destinationInstanceName)
    {
        throw new Error("setDestinationInstance() must be called to specify the target destination before the 'ASTTest_Generated' API can be used.");
    }
}

/**
 * Sets the post method timeout interval (in milliseconds), which is how long to wait for a post result from the destination instance before raising an error.\
 * All post methods will use this timeout value. Specify -1 for no timeout. 
 */
export function setPostTimeoutInMs(timeoutInMs: number): void
{
    _postTimeoutInMs = Math.max(-1, timeoutInMs);
}

/**
 * Returns the post method timeout interval (in milliseconds), which is how long to wait for a post result from the destination instance before raising an error.\
 * A value of -1 means there is no timeout.
 */
export function getPostTimeoutInMs(): number
{
    return (_postTimeoutInMs);
}

export namespace Test
{
    /**
     * Testing 1) a mix of ',' and ';' member separators, 2) A complex-type array */
    export class MixedTest
    {
        p1: string[];
        p2: string[][];
        p3: { p4: number, p5: string }[];

        constructor(p1: string[], p2: string[][], p3: { p4: number, p5: string }[])
        {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }
    }

    /**
     * Example of a complex type.
     */
    export class Name
    {
        first: string;
        last: string;

        constructor(first: string, last: string)
        {
            this.first = first;
            this.last = last;
        }
    }

    /**
     * Example of a type that references another type.
     */
    export type Names = Name[];

    /**
     * Example of a nested complex type.
     */
    export class Nested
    {
        abc: { a: Uint8Array, b: { c: Names } };

        constructor(abc: { a: Uint8Array, b: { c: Names } })
        {
            this.abc = abc;
        }
    }

    /**
     * Example of an enum.
     */
    export enum Letters { A = 0, B = 3, C = 4, D = 9 }

    /**
     * *Note: The result (Names) produced by this post method is received via the PostResultDispatcher provided to IC.start(). Returns the post method callID.*
     * 
     * Example of a [post] method that uses custom types.
     */
    export function makeName_Post(callContextData: any, firstName?: string, lastName?: string): number
    {
        checkDestinationSet();
        const callID = IC.postFork(_destinationInstanceName, "makeName", 1, _postTimeoutInMs, callContextData, 
            IC.arg("firstName?", firstName), 
            IC.arg("lastName?", lastName));
        return (callID);
    }

    /**
     * *Note: The result (Names) produced by this post method is received via the PostResultDispatcher provided to IC.start().*
     * 
     * Example of a [post] method that uses custom types.
     */
    export function makeName_PostByImpulse(callContextData: any, firstName?: string, lastName?: string): void
    {
        checkDestinationSet();
        IC.postByImpulse(_destinationInstanceName, "makeName", 1, _postTimeoutInMs, callContextData, 
            IC.arg("firstName?", firstName), 
            IC.arg("lastName?", lastName));
    }

    /**
     * Example of a [non-post] method
     */
    export function DoIt_Fork(p1: Name[][]): void
    {
        checkDestinationSet();
        IC.callFork(_destinationInstanceName, 123, { p1: p1 });
    }

    /**
     * Example of a [non-post] method
     */
    export function DoIt_Impulse(p1: Name[][]): void
    {
        checkDestinationSet();
        IC.callImpulse(_destinationInstanceName, 123, { p1: p1 });
    }

    /**
     * Example of a [non-post] method
     */
    export function DoIt_EnqueueFork(p1: Name[][]): void
    {
        checkDestinationSet();
        IC.queueFork(_destinationInstanceName, 123, { p1: p1 });
    }

    /**
     * Example of a [non-post] method
     */
    export function DoIt_EnqueueImpulse(p1: Name[][]): void
    {
        checkDestinationSet();
        IC.queueImpulse(_destinationInstanceName, 123, { p1: p1 });
    }
}

/**
 * Handler for the results of previously called post methods (in Ambrosia, only 'post' methods return values). See Messages.PostResultDispatcher.\
 * Must return true only if the result (or error) was handled.
 */
export function postResultDispatcher(senderInstanceName: string, methodName: string, methodVersion: number, callID: number, callContextData: any, result: any, errorMsg: string): boolean
{
    const sender: string = IC.isSelf(senderInstanceName) ? "local" : `'${senderInstanceName}'`;
    let handled: boolean = true;

    if (_knownDestinations.indexOf(senderInstanceName) === -1)
    {
        return (false); // Not handled: this post result is from a different instance than the destination instance currently (or previously) targeted by the 'ASTTest_Generated' API
    }

    if (errorMsg)
    {
        switch (methodName)
        {
            case "makeName":
                Utils.log(`Error: ${errorMsg}`);
                break;
            default:
                handled = false;
                break;
        }
    }
    else
    {
        switch (methodName)
        {
            case "makeName":
                const makeName_Result: Test.Names = result;
                // TODO: Handle the result, optionally using the callContextData passed in the call
                Utils.log(`Post method '${methodName}' from ${sender} IC succeeded`);
                break;
            default:
                handled = false;
                break;
        }
    }
    return (handled);
}